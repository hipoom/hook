// ========================================================================
// 发布 *.aar 产物到本地的 maven 仓库.
// ========================================================================

apply plugin: "maven-publish"
apply plugin: "signing"

/**
 * 返回仓库的本地路径。
 */
static String getLocalRepositoryDirectory() {
    return "/Users/zhp/Workspace/hipoom-maven-2";
}

/**
 * 模块名.
 */
static String getProductArtifactId() {
    return "hook-adapter"
}

/**
 * 版本号。
 */
static String getProductVersion() {
    return "0.0.1"
}

// 配置签名，上传到 central maven 必须要签名
signing {
    sign(publishing.publications)
}



/* ======================================================= */
/* Task Methods                                            */
/* ======================================================= */

/**
 * 注册 sourcesJar 任务，否则会没有 sources.jar 文件.
 */
tasks.register('sourcesJar', Jar) {
    classifier = 'sources'
    dependsOn assemble
    from android.sourceSets.main.java.srcDirs
}

tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    failOnError = false
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

tasks.register('javadocJar', Jar) {
    classifier = 'javadoc'
    dependsOn javadoc
    from javadoc.destinationDir
}

publishing {
    // 定义目标仓库
    repositories {
        maven {
            url getLocalRepositoryDirectory()
        }
    }

    // 定义产物
    publications { PublicationContainer publicationContainer ->
        hipoomLocal(MavenPublication) {
            // 基本信息
            groupId 'com.hipoom'
            artifactId getProductArtifactId()
            version getProductVersion()

            // 增加 sources.jar 和 javadocs.jar
            artifact sourcesJar
            artifact "$buildDir/outputs/aar/hook-adapter-release.aar"
            artifact javadocJar

            pom.withXml {
                //根节点
                def rootDependencyNode = asNode().appendNode('dependencies')

                //依赖信息
                writeDependencyToPomFile(rootDependencyNode, configurations.implementation)
                writeDependencyToPomFile(rootDependencyNode, configurations.api)
                writeDependencyToPomFile(rootDependencyNode, configurations.provided)
                writeDependencyToPomFile(rootDependencyNode, configurations.compile)
                writeDependencyToPomFile(rootDependencyNode, configurations.releaseApi)
                writeDependencyToPomFile(rootDependencyNode, configurations.releaseCompile)
                writeDependencyToPomFile(rootDependencyNode, configurations.releaseImplementation)
            }

            // 追加其他信息
            pom {
                name = "processor"
                description = "A utils for java."
                url = "https://github.com/hipoom/registry"

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                    developers {
                        developer {
                            id = "hipoom"
                            name = "hipoom"
                            email = "284967632@qq.com"
                        }
                        scm {
                            connection = "no-connection"
                            developerConnection = "no-developerConnection"
                            url = "no-url"
                        }
                    }
                }
            }
        }
    }
}

/**
 * 写入依赖信息到pom.xml文件中
 */
private void writeDependencyToPomFile(Object rootDependencyNode, Configuration configuration) {
    configuration.allDependencies.withType(ModuleDependency).tap {
        configureEach { dependency ->
            // 这些是本地依赖的其他 module
            if (dependency.group == null || dependency.group.isEmpty()) {
                return
            }

            // 添加 dependency 节点
            def dependencyNode = rootDependencyNode.appendNode('dependency')

            // 节点内容
            def group = dependency.group
            def artifactId = dependency.name
            def version = dependency.version

            dependencyNode.appendNode('groupId', group)
            dependencyNode.appendNode('artifactId', artifactId)
            dependencyNode.appendNode('version', version == "unspecified" ? project.VERSION : version)
            dependencyNode.appendNode('scope', configuration.name)

            // 如果有 exclude，追加 exclude 信息
            if (dependency.excludeRules.size() <= 0) {
                return
            }

            def exclusionsNode = dependencyNode.appendNode('exclusions')
            dependency.excludeRules.each { rule ->
                def exclusionNode = exclusionsNode.appendNode('exclusion')
                boolean isEmptyGroupID = (rule.group == null || rule.group == "")
                exclusionNode.appendNode('groupId', isEmptyGroupID ? "*" : rule.group)
                exclusionNode.appendNode('artifactId', rule.module)
            }
        }
    }
}


/* ======================================================= */
/* Private Methods                                         */
/* ======================================================= */

/**
 * 获取 local.properties 文件.
 * @return File
 */
File getLocalProperties() {
    File localProperties = rootProject.file("local.properties")
    if (!localProperties.exists()) {
        throw new IllegalStateException("[ERROR] 找不到 local.properties 文件.")
    }
    return localProperties
}

/**
 * 从 local.properties 中读取 key 对应的值。
 */
String readLocalProperty(String key) {
    File file = getLocalProperties()
    InputStream is = file.newDataInputStream()
    Properties properties = new Properties()
    properties.load(is)

    Set<String> keys = properties.stringPropertyNames()
    if (!keys.contains(key)) {
        return null
    }

    return properties.getProperty(key)
}